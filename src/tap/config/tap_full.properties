##########################################################
#             FULL TAP CONFIGURATION FILE                #
#                                                        #
# TAP Version: 2.0                                       #
# Date: 09 Feb. 2015                                     #
# Author: Gregory Mantelet (ARI)                         #
#                                                        #
# See the TAP documentation for more details: ...TODO... #
########################################################## 

###########
# GENERAL #
###########

# [OPTIONAL]
# Path to the page which will be the index/home page of the TAP Service.
service_home_page = 

############
# PROVIDER #
############

# [OPTIONAL]
# Name of the provider of the TAP Service.
provider_name = ARI

# [OPTIONAL]
# Description of the TAP Service.
tap_description = My TAP Service is so amazing! You should use it with your favorite TAP client.

############
# DATABASE #
############

# [OPTIONAL]
# JDBC driver path. By default, it is guessed in function of the database name provided in the jdbc_url property. It MUST be provided if another DBMS is used or if the JDBC driver path does not match the following ones:
#     * Oracle : oracle.jdbc.OracleDriver
#     * PostgreSQL: org.postgresql.Driver
#     * MySQL : com.mysql.jdbc.Driver
#     * SQLite : org.sqlite.JDBC
#jdbc_driver = 

# [MANDATORY]
# It must be a JDBC driver URL.
# Note: The username, password or other parameters may be included in it, but in this case, the corresponding properties should leave empty or not provided at all.
jdbc_url = 

# [MANDATORY]
# Mandatory if the username is not already provided in jdbc_url
# Username used to access to the database.
db_username = 

# [MANDATORY]
# Mandatory if the password is not already provided in jdbc_url
# Password used by db_username to access to the database.
# Note: No password encryption can be done in this configuration file for the moment.
db_password = 

# [MANDATORY]
# The translator to use in order to translate ADQL to a SQL compatible with the used DBMS and its spatial extension.
# The TAP library supports only Postgresql (without spatial extension) and PgSphere for the moment. But you can provide your own SQL translator
# (even if it does not have spatial features), by providing a path to a class (within brackets: {...}) that implements ADQLTranslator (for instance: {apackage.MyADQLTranslator})
# and which have at least an empty constructor.
# Allowed values: postgres, pgsphere, a class path
sql_translator = postgres

############
# METADATA #
############

# [MANDATORY]
# Metadata fetching method. The value of this key defines the way the library will get the list of all schemas, tables and columns to publish and all their metadata (e.g. utype, description, type, ...)
# In its current state, the library proposes two methods:
#    1/ Parse a TableSet XML document and load its content into the database schema TAP_SCHEMA (note: this schema is first erased and rebuilt by the library).
#    2/ Get all metadata from the database schema TAP_SCHEMA. 
# Allowed values: xml, db.
metadata =  

# [MANDATORY]
# Mandatory if the value of "metadata" is "xml".
# Local file path to the TableSet XML document. This XML must implement the schema TableSet defined by VODataService (http://www.ivoa.net/xml/VODataService/v1.1).
metadata_file = 

#########
# FILES #
#########

# [MANDATORY]
# Type of the file manager.
#
# Accepted values are: local (to manage files on the local system). You can also add another way to manage files by providing
# the path (within brackets: {...}) to a class implementing TAPFileManager and having at least one constructor with only a
# java.util.Properties parameter.
#
# Allowed values: local, a class path.
file_manager = local

# [MANDATORY]
# File path of the directory in which all TAP files (logs, errors, job results, backup, ...) must be.
file_root_path = 

# [OPTIONAL]
# Tells whether a directory should be created for each user. If yes, the user directory will be named with the user ID. In this directory,
# there will be error files, job results and it may be the backup file of the user.
# Allowed values: true (default), false.
directory_per_user = true

# [OPTIONAL]
# Tells whether user directories must be grouped. If yes, directories are grouped by the first letter found in the user ID.
# Allowed values: true (default), false.
group_user_dir = true

# [OPTIONAL]
# The default period (in seconds) to keep query results. The prefix "default" means here that this value is put by default by the TAP Service if the client does not provide a value for it.
# The default period MUST be less or equals to the maximum retention period. If this rule is not respected, the default retention period is set immediately to the maximum retention period.
# A negative or null value means there is no restriction over the default retention period: job results will be kept forever. Float values are not allowed.
# Default value: 0 (results kept forever).
default_retention_period = 0

# [OPTIONAL]
# The maximum period (in seconds) to keep query results. The prefix "max" means here that the client can not set a retention period greater than this one.
# The maximum period MUST be greater or equals to the default retention period. If this rule is not respected, the default retention period is set immediately to the maximum retention period.
# A negative or null value means there is no restriction over the maximum retention period: the job results will be kept forever. Float values are not allowed.
# Default value: 0 (results kept forever).
max_retention_period = 0

##############
# UWS_BACKUP #
##############

# [OPTIONAL]
# Frequency at which the UWS service (that's to say, all its users and jobs) must be backuped.
# Allowed values are: never (no backup will never be done ; default), user_action (each time a user does a writing action, like creating or execution a job), a time (must be positive and not null) in milliseconds.
backup_frequency = never

# [OPTIONAL]
# Tells whether the backup must be one file for every user, or one file for each user. This second option should be chosen if your TAP Service is organizing its files by user directories ; see the property directory_per_user.
# Allowed values are: user (one backup file for each user ; default), whole (one file for all users ; may generates a big file).
backup_mode = user

#####################
# ASYNCHRONOUS JOBS #
#####################

# [OPTIONAL]
# Maximum number of asynchronous jobs that can run simultaneously.
# A negative or null value means there is no restriction over the number of running asynchronous jobs.
# By default, there is no restriction: max_async_jobs=0.
max_async_jobs = 0

###################
# QUERY_EXECUTION #
###################

# [OPTIONAL]
# Default time (in milliseconds) for query execution. The prefix "default" means here that the execution duration will be this one if the client does not set one.
# The default duration MUST be less or equals to the maximum execution duration. If this rule is not respected, the default execution duration is set immediately to the maximum execution duration.
# A negative or null value means there is no restriction over the default execution duration: the execution could never end. Float values are not allowed.
# By default, there is no restriction: default_execution_duration=0.
default_execution_duration = 0

# [OPTIONAL]
# Maximum time (in milliseconds) for query execution. The prefix "max" means here that the client can not set a time greater than this one.
# The maximum duration MUST be greater or equals to the default execution duration. If this rule is not respected, the default execution duration is set immediately to the maximum execution duration.
# A negative or null value means there is no restriction over the maximum execution duration: the execution could never end. Float values are not allowed.
# By default, there is no restriction: max_execution_duration=0.
max_execution_duration = 0

##########
# OUTPUT #
##########

# [OPTIONAL]
# Comma separated list of output formats for query results, in addition to the VOTable.
# Allowed values are: json, csv, tsv, sv(<separator>), or a path (within brackets: {...}) to a class implementing OutputFormat<ResultSet> and having at least one constructor with only a tap.ServiceConnection<ResultSet> parameter.
output_add_formats = 

# [OPTIONAL]
# Default limit for the result output. The prefix "default" means here that this value will be set if the client does not provide one.
# This limit can be expressed in only one unit: rows.
# A negative or null value means there is no restriction over this limit. Float values are not allowed.
# Obviously this limit MUST be less or equal than output_max_limit.
# By default, there is no restriction: output_default_limit=0
output_default_limit = 0

# [OPTIONAL]
# Maximum limit for the result output. The prefix "max" means here that the client can not set a limit greater than this one.
# This limit can be expressed in only one unit: rows.
# A negative or null value means there is no restriction over this limit. Float values are not allowed.
# Obviously this limit MUST be greater or equal than output_default_limit.
# By default, there is no restriction: output_max_limit=0
output_max_limit = 0

##########
# UPLOAD #
##########

# [OPTIONAL]
# Tells whether the Upload must be enabled. If enabled, files can be uploaded in the file_root_path, the corresponding tables can be added inside the UPLOAD_SCHEMA
# of the database, queried and then deleted.
# Allowed values: true (default), false.
upload_enabled = false

# [OPTIONAL]
# Default limit for the number of uploaded records that can be inserted inside the database. The prefix "default" means here that this value will be set if the client does not provide one.
# This limit can be expressed with 2 types: rows or bytes. For rows, you just have to suffix the value by a "r" (upper- or lower-case), with nothing (by default, nothing will mean "rows"). For bytes, you have to suffix the numeric value by "b", "kb", "Mb" or "Gb". Here, unit is case sensitive (except for the last character: "b"). No other storage unit is allowed.
# A negative or null value means there is no restriction over this limit. Float values are not allowed.
# Obviously this limit MUST be less or equal than upload_max_db_limit.
# By default, there is no restriction: upload_default_db_limit=0
upload_default_db_limit = 0

# [OPTIONAL]
# Maximum limit for the number of uploaded records that can be inserted inside the database. The prefix "max" means here that the client can not set a limit greater than this one.
# This limit can be expressed with 2 types: rows or bytes. For rows, you just have to suffix the value by a "r" (upper- or lower-case), with nothing (by default, nothing will mean "rows"). For bytes, you have to suffix the numeric value by "b", "kb", "Mb" or "Gb". Here, unit is case sensitive (except for the last character: "b"). No other storage unit is allowed.
# A negative or null value means there is no restriction over this limit. Float values are not allowed.
# Obviously this limit MUST be greater or equal than upload_default_db_limit.
# By default, there is no restriction: upload_max_db_limit=0
upload_max_db_limit = 0

# [OPTIONAL]
# Maximum allowed size for the uploaded file.
# This limit MUST be expressed in bytes. Thus, you have to suffix the numeric value by "b", "kb", "Mb" or "Gb". Here, unit is case sensitive (except for the last character: "b"). No other storage unit is allowed.
# A negative or null value means there is no restriction over this limit. Float values are not allowed.
# In function of the chosen upload_max_db_limit type, upload_max_file_size should be greater in order to figure out the metadata part.
# By default, there is no restriction: upload_max_file_size=0
upload_max_file_size = 0
