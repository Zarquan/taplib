##########################################################
#            MINIMUM TAP CONFIGURATION FILE              #
#                                                        #
# TAP Version: 2.0                                       #
# Date: 09 Feb. 2015                                     #
# Author: Gregory Mantelet (ARI)                         #
#                                                        #
# See the TAP documentation for more details: ...TODO... #
########################################################## 

############
# DATABASE #
############

# JDBC driver path. By default, it is guessed in function of the database name provided in the jdbc_url property. It MUST be provided if another DBMS is used or if the JDBC driver path does not match the following ones:
#     * Oracle : oracle.jdbc.OracleDriver
#     * PostgreSQL: org.postgresql.Driver
#     * MySQL : com.mysql.jdbc.Driver
#     * SQLite : org.sqlite.JDBC
#jdbc_driver = 

# It must be a JDBC driver URL.
# Note: The username, password or other parameters may be included in it, but in this case, the corresponding properties should leave empty or not provided at all.
jdbc_url = 

# Mandatory if the username is not already provided in jdbc_url
# Username used to access to the database.
db_user = 

# Mandatory if the password is not already provided in jdbc_url
# Password used by db_username to access to the database.
# Note: No password encryption can be done in this configuration file for the moment.
db_password =

# The translator to use in order to translate ADQL to a SQL compatible with the used DBMS and its spatial extension.
# The TAP library supports only Postgresql (without spatial extension) and PgSphere for the moment. But you can provide your own SQL translator
# (even if it does not have spatial features), by providing a path to a class (within brackets: {...}) that implements ADQLTranslator (for instance: {apackage.MyADQLTranslator})
# and which have at least an empty constructor.
# Allowed values: postgres, pgsphere, a class path
sql_translator = postgres

############
# METADATA #
############

# Metadata fetching method. The value of this key defines the way the library will get the list of all schemas, tables and columns to publish and all their metadata (e.g. utype, description, type, ...)
# In its current state, the library proposes two methods:
#    1/ Parse a TableSet XML document and load its content into the database schema TAP_SCHEMA (note: this schema is first erased and rebuilt by the library).
#    2/ Get all metadata from the database schema TAP_SCHEMA. 
# Allowed values: xml, db.
metadata =  

# Mandatory if the value of "metadata" is "xml".
# Local file path to the TableSet XML document. This XML must implement the schema TableSet defined by VODataService (http://www.ivoa.net/xml/VODataService/v1.1).
metadata_file = 

#########
# FILES #
#########

# Type of the file manager.
#
# Accepted values are: local (to manage files on the local system). You can also add another way to manage files by providing
# the path (within brackets: {...}) to a class implementing TAPFileManager and having at least one constructor with only a
# java.util.Properties parameter.
#
# Allowed values: local, a class path.
file_manager = local

# File path of the directory in which all TAP files (logs, errors, job results, backup, ...) must be.
file_root_path = 
