################################################################
#                MINIMUM TAP CONFIGURATION FILE                #
#                                                              #
# TAP Version: 1.0                                             #
# Date: 20 Nov. 2013                                           #
# Author: Gregory Mantelet (ARI)                               #
################################################################

############
# DATABASE #
############

# JDBC driver path. By default, it is guessed in function of the database name provided in the jdbc_url property. It MUST be provided if another DBMS is used or if the JDBC driver path does not match the following ones:
#     * Oracle : oracle.jdbc.OracleDriver
#     * PostgreSQL: org.postgresql.Driver
#     * MySQL : com.mysql.jdbc.Driver
#     * SQLite : org.sqlite.JDBC
jdbc_driver = foo

# It must be a JDBC driver URL.
# Note: The username, password or other parameters may be included in it, but in this case, the corresponding properties should leave empty or not provided at all.
jdbc_url = jdbc:postgresql:gmantele

# Mandatory if the username is not already provided in jdbc_url
# Username used to access to the database.
db_user = gmantele

# Mandatory if the password is not already provided in jdbc_url
# Password used by db_username to access to the database.
# Note: No password encryption can be done in this configuration file for the moment.
db_password = pwd

# List all tables that must be accessed thanks to this TAP Service.
#
# Table names must be separated by a comma. A table name may explicitly specify the schema (if not, the table will be considered as part of the "public" schema).
#
# For each table, you can restrict the list of columns that you to expose via the TAP Service. This list is not mandatory, but if provided it must be
# within parenthesis and comma separated.
#
# Example: schema1.*, schema2.table1, table2, table3(col1, col2, col4, ...)
db_tables = 

# The translator to use in order to translate ADQL to a SQL compatible with the used DBMS and its spatial extension.
# The TAP library supports only Postgresql (without spatial extension) and PgSphere for the moment. But you can provide your own SQL translator
# (even if it does not have spatial features), by providing a path to a class (within brackets: {...}) that implements ADQLTranslator (for instance: {apackage.MyADQLTranslator})
# and which have at least an empty constructor.
# Allowed values: postgres, pgsphere, a class path
sql_translator = postgres

#########
# FILES #
#########

# Type of the file manager.
#
# Accepted values are: local (to manage files on the local system). You can also add another way to manage files by providing
# the path (within brackets: {...}) to a class implementing TAPFileManager and having at least one constructor with only a
# java.util.Properties parameter.
#
# Allowed values: local, a class path.
file_manager = local

# File path of the directory in which all TAP files (logs, errors, job results, backup, ...) must be.
file_root_path = bin/ext/test/tap
